@page "/weather"

@inject HubUrls HubUrls
@inject ILogger<Weather> Logger
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<EditForm Model="@observations">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <label>
        Describe the observation:
        <InputText id="observation" @bind-Value="userInput"/>
    </label>

    <button id="submitobservation" @onclick="Send" disabled="@(!IsConnected)">Submit</button>
</EditForm>

<div id="observationList">
    @foreach (var o in observations)
    {
        Logger.LogInformation($"Observations from list {o.ObservationText}");
        <p>@o.ObservationText</p>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private List<WeatherObservation> observations = new List<WeatherObservation>();
    private string? userInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(HubUrls.WeatherHubUrl)
            .Build();

        hubConnection.On<WeatherObservation>("ReceiveMessage", (weatherObservation) =>
        {
            observations.Add(weatherObservation);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SubmitObservation", new WeatherObservation { ObservationText = userInput });
        }
    }

    public bool IsConnected =>
      hubConnection.State == HubConnectionState.Connected;

   public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}


 